<?xml version="1.0"?>
<launch>
 <arg name="robot_name"/>
 <arg name="init_pose"/>
 <arg name="initial_pose_x"/>
 <arg name="initial_pose_y"/>
 <arg name="initial_pose_a" default="0.0"/>
<param name="robot_description" command="$(find xacro)/xacro.py $(find turtlebot_description)/robots/kobuki_hexagons_kinect.urdf.xacro" />

<node name="spawn_minibot_model" pkg="gazebo_ros" type="spawn_model"
args="$(arg init_pose) -urdf -param robot_description -model $(arg robot_name)" output="screen" >
</node>

  <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
  <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
</node>

<node pkg="robot_state_publisher" type="robot_state_publisher" 
      name="robot_state_publisher" output="screen">
     <param name="publish_frequency" type="double" value="30.0" /> 
</node>

    <!-- The odometry estimator, throttling, fake laser etc. go here -->

<!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="$(arg robot_name)/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="camera/depth/image_raw"/>
    <remap from="scan" to="scan"/>
  </node>

 <!--include file="$(find turtlebot_bringup)/launch/3dsensor.launch">
      <arg name="depth_registration" value="false" />
      <arg name="scan_topic" value="$(arg robot_name)/scan" />
    </include>-->

<!-- Localization -->
 <!-- <arg name="custom_amcl_launch_file" default="$(find multi_turtlebot)/launch/includes/amcl/kinect_amcl.launch.xml"/> 
  <include file="$(arg custom_amcl_launch_file)">
  <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
  <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
  <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  <arg name="odom_frame_id" value="$(arg robot_name)/odom" />
  <arg name="base_frame_id" value="$(arg robot_name)/base_link" />
  <arg name="global_frame_id" value="/map"/>
  <arg name="scan_topic"   value="/$(arg robot_name)/scan"/>
  <arg name="use_map_topic"   value="false"/>
  </include>-->
 <!--<arg name="odom_frame_id" value="$(arg robot_name)/odom"/>
  <arg name="base_frame_id" value="$(arg robot_name)/base_footprint"/>
  <arg name="global_frame_id" value="map"/>-->

  <!-- Run navigation stack -->
    <!--node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">  
      <remap from="map" to="/map" />         
      <param name="controller_frequency" value="10.0" />
      <rosparam file="$(find multi_turtlebot)/move_base_config/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find multi_turtlebot)/move_base_config/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find multi_turtlebot)/move_base_config/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find multi_turtlebot)/move_base_config/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find multi_turtlebot)/move_base_config/base_local_planner_params.yaml" command="load" />      
    </node-->   

 <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
      <param name="odom_frame_id" value="$(arg robot_name)/odom" />
      <param name="base_frame_id" value="$(arg robot_name)/base_link" />
</node>

<!--<include file="$(find multi_turtlebot)/move_base_config/amcl_node.xml"/>-->
 
    <!-- All the stuff as from usual robot launch file -->
 

</launch>
